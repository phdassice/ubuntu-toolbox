#!/bin/bash

# Ubuntu Toolbox 版本發布腳本
# 用於簡化版本發布流程

set -e

# 顏色定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# 配置
TOOLBOX_SCRIPT="./toolbox"
REPO_NAME="ubuntu-toolbox"

# 顯示標題
show_header() {
    clear
    echo -e "${BLUE}╔═══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║               ${YELLOW}Ubuntu Toolbox 版本發布工具${BLUE}                ║${NC}"
    echo -e "${BLUE}╚═══════════════════════════════════════════════════════════════╝${NC}"
    echo
}

# 檢查必要工具
check_requirements() {
    local missing_tools=()
    
    if ! command -v git &> /dev/null; then
        missing_tools+=("git")
    fi
    
    if ! command -v jq &> /dev/null; then
        echo -e "${YELLOW}警告: 未安裝 jq，將使用簡單的文本解析${NC}"
    fi
    
    if [ ${#missing_tools[@]} -ne 0 ]; then
        echo -e "${RED}錯誤: 缺少必要工具: ${missing_tools[*]}${NC}"
        exit 1
    fi
}

# 獲取當前版本
get_current_version() {
    if [ -f "$TOOLBOX_SCRIPT" ]; then
        grep "LOCAL_VERSION=" "$TOOLBOX_SCRIPT" | cut -d'"' -f2 | head -1
    else
        echo "0.0.0"
    fi
}

# 驗證版本格式
validate_version() {
    local version=$1
    if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo -e "${RED}錯誤: 版本格式不正確，應為 x.y.z 格式${NC}"
        return 1
    fi
    return 0
}

# 更新腳本中的版本號
update_script_version() {
    local new_version=$1
    
    if [ -f "$TOOLBOX_SCRIPT" ]; then
        # 使用 sed 更新版本號
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            sed -i '' "s/LOCAL_VERSION=\"[^\"]*\"/LOCAL_VERSION=\"$new_version\"/" "$TOOLBOX_SCRIPT"
        else
            # Linux
            sed -i "s/LOCAL_VERSION=\"[^\"]*\"/LOCAL_VERSION=\"$new_version\"/" "$TOOLBOX_SCRIPT"
        fi
        echo -e "${GREEN}✓ 已更新腳本版本號為 $new_version${NC}"
    else
        echo -e "${RED}錯誤: 找不到 toolbox 腳本${NC}"
        return 1
    fi
}

# 生成版本號建議
suggest_version() {
    local current=$1
    local major minor patch
    
    IFS='.' read -r major minor patch <<< "$current"
    
    echo -e "${BLUE}版本號建議:${NC}"
    echo -e "${GREEN}1.${NC} 修補版本 (bug修復): $major.$minor.$((patch + 1))"
    echo -e "${GREEN}2.${NC} 次要版本 (新功能): $major.$((minor + 1)).0"
    echo -e "${GREEN}3.${NC} 主要版本 (重大變更): $((major + 1)).0.0"
    echo -e "${GREEN}4.${NC} 自定義版本"
}

# 生成更新說明模板
generate_release_notes() {
    local version=$1
    local output_file="release_notes_v${version}.md"
    
    cat > "$output_file" << EOF
# Ubuntu Toolbox v${version} 發布說明

## 🎉 新功能
- [ ] 新功能說明 1
- [ ] 新功能說明 2

## 🔧 改進
- [ ] 改進說明 1
- [ ] 改進說明 2

## 🐛 錯誤修復
- [ ] 修復說明 1
- [ ] 修復說明 2

## 🔒 安全性
- [ ] 安全性改進說明

## ⚠️ 重大變更
- [ ] 重大變更說明

## 📝 其他
- [ ] 其他變更說明

---
**完整變更記錄**: [查看比較](https://github.com/你的用戶名/${REPO_NAME}/compare/v上一版本...v${version})
EOF

    echo -e "${GREEN}✓ 已生成發布說明模板: $output_file${NC}"
    echo -e "${YELLOW}請編輯此文件並填寫具體的更改內容${NC}"
}

# 執行 Git 操作
perform_git_operations() {
    local version=$1
    local tag="v$version"
    
    echo -e "${YELLOW}正在執行 Git 操作...${NC}"
    
    # 檢查是否有未提交的變更
    if ! git diff --quiet && ! git diff --staged --quiet; then
        echo -e "${YELLOW}檢測到未提交的變更${NC}"
        read -p "是否要先提交所有變更? [y/N]: " commit_changes
        if [[ $commit_changes =~ ^[Yy]$ ]]; then
            git add .
            git commit -m "Prepare release v$version"
            echo -e "${GREEN}✓ 已提交變更${NC}"
        fi
    fi
    
    # 創建標籤
    echo -e "${YELLOW}正在創建標籤 $tag...${NC}"
    if git tag -a "$tag" -m "Release version $version"; then
        echo -e "${GREEN}✓ 已創建標籤 $tag${NC}"
    else
        echo -e "${RED}✗ 創建標籤失敗${NC}"
        return 1
    fi
    
    # 推送到遠端
    read -p "是否要推送到遠端 repository? [y/N]: " push_remote
    if [[ $push_remote =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}正在推送到遠端...${NC}"
        
        if git push origin main && git push origin "$tag"; then
            echo -e "${GREEN}✓ 已推送到遠端${NC}"
        else
            echo -e "${RED}✗ 推送失敗${NC}"
            return 1
        fi
    fi
}

# 顯示後續步驟
show_next_steps() {
    local version=$1
    local tag="v$version"
    
    echo
    echo -e "${BLUE}🎉 版本 $version 發布準備完成！${NC}"
    echo
    echo -e "${YELLOW}後續步驟:${NC}"
    echo "1. 前往 GitHub 創建 Release:"
    echo "   https://github.com/你的用戶名/${REPO_NAME}/releases/new"
    echo
    echo "2. 選擇標籤: $tag"
    echo
    echo "3. 填寫發布標題: Ubuntu Toolbox v$version"
    echo
    echo "4. 複製發布說明內容 (如果已生成)"
    echo
    echo "5. 發布 Release"
    echo
    echo -e "${GREEN}發布完成後，用戶將能夠自動更新到新版本！${NC}"
}

# 主程序
main() {
    show_header
    
    echo -e "${BLUE}檢查環境...${NC}"
    check_requirements
    
    local current_version=$(get_current_version)
    echo -e "${GREEN}當前版本: $current_version${NC}"
    echo
    
    suggest_version "$current_version"
    echo
    
    read -p "請選擇版本類型 [1-4]: " version_choice
    
    local new_version
    case $version_choice in
        1)
            IFS='.' read -r major minor patch <<< "$current_version"
            new_version="$major.$minor.$((patch + 1))"
            ;;
        2)
            IFS='.' read -r major minor patch <<< "$current_version"
            new_version="$major.$((minor + 1)).0"
            ;;
        3)
            IFS='.' read -r major minor patch <<< "$current_version"
            new_version="$((major + 1)).0.0"
            ;;
        4)
            read -p "請輸入自定義版本號 (格式: x.y.z): " new_version
            ;;
        *)
            echo -e "${RED}無效的選擇${NC}"
            exit 1
            ;;
    esac
    
    if ! validate_version "$new_version"; then
        exit 1
    fi
    
    echo
    echo -e "${YELLOW}準備發布版本: $new_version${NC}"
    read -p "確定要繼續嗎? [y/N]: " confirm
    
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}已取消發布${NC}"
        exit 0
    fi
    
    # 更新版本號
    update_script_version "$new_version"
    
    # 生成發布說明
    read -p "是否要生成發布說明模板? [y/N]: " generate_notes
    if [[ $generate_notes =~ ^[Yy]$ ]]; then
        generate_release_notes "$new_version"
    fi
    
    # Git 操作
    read -p "是否要執行 Git 操作 (提交、標籤、推送)? [y/N]: " do_git
    if [[ $do_git =~ ^[Yy]$ ]]; then
        perform_git_operations "$new_version"
    fi
    
    # 顯示後續步驟
    show_next_steps "$new_version"
}

# 執行主程序
main "$@"
